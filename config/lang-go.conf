[general]
name = Go
execution_profile = CompilerProfile
binary = go
version_switch = version
compilation_command = lambda source_file, output_file: ["go", "build", "-o",
        output_file, source_file]
filename = source.go
apparmor_profile = straitjacket/compiler/go
compiled_apparmor_profile = straitjacket/compiled/go

[test-simple]
source = package main
         import fmt "fmt"
         func main() {
            fmt.Printf("Hello from Go\n")
         }
stdout = \AHello from Go\n\Z
stderr = \A\Z
exitstatus = 0
error =

[test-rlimit]
source = package main
         func main() {
            data := new([107374182]int)
            data[1] = 2
         }
stdout = \A\Z
stderr = out of memory
exitstatus = 2
error = runtime_error

[test-apparmor]
source = package main
         import (
            "os"
            "fmt"
         )
         func main() {
            file, err := os.Open("/etc/hosts")
            if err != nil {
                fmt.Printf("error: %%s", err)
                return
            }
            bytes := make([]byte, 4096)
            size, err := file.Read(bytes)
            if err != nil {
                fmt.Printf("error: %%s", err)
            }
            fmt.Printf("read: %%s", bytes[:size])
            file.Close()
         }
stdout = \Aerror: open /etc/hosts: permission denied\Z
stderr = \A\Z
exitstatus = 0
error =
